// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  email              String             @unique
  password           String
  firstName          String
  lastName           String
  middleName         String?
  refreshToken       String?
  organizedEvents    Event[]            @relation("UserAsOrganizer")
  participatedEvents EventParticipant[] @relation("UserAsParticipant")
  eventCommittee     EventCommittee[]   @relation("UserAsCommittee")
  eventFeedback      EventFeedback[]    @relation("UserFeedback")
  groupMembership    GroupMembership[]  @relation("UserGroups")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model EventGroup {
  eventId String
  groupId String
  event   Event  @relation("EventGroups", fields: [eventId], references: [id])
  group   Group  @relation("GroupEvents", fields: [groupId], references: [id])

  createdAt DateTime @default(now())

  @@id([eventId, groupId])
  @@index([eventId])
  @@index([groupId])
}

model Event {
  id                 String             @id @default(uuid())
  organizerId        String
  title              String
  details            String?
  purpose            String?
  location           String?
  startDateTime      DateTime?
  endDateTime        DateTime?
  estimatedAttendees Int?
  estimatedExpense   Decimal?
  price              Decimal?           @default(0)
  audience           EventAudience?     @default(PUBLIC)
  category           EventCategory?     @default(PERSONAL)
  status             EventStatus?       @default(UPCOMING)
  finances           EventFinance[]     @relation("EventFinances")
  participants       EventParticipant[] @relation("EventParticipants")
  committees         EventCommittee[]   @relation("EventCommittees")
  feedbacks          EventFeedback[]    @relation("EventFeedbacks")
  historyLogs        EventHistoryLog[]  @relation("EventHistoryLogs")
  groups             EventGroup[]       @relation("EventGroups")
  organizer          User               @relation("UserAsOrganizer", fields: [organizerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizerId])
}

enum EventCategory {
  PERSONAL
  COMMUNITY
  SCHOOL
  WORK
}

enum EventAudience {
  PUBLIC
  INVITED_ONLY
  USER_GROUP
  ONLY_ME
}

enum EventStatus {
  ON_HOLD
  DRAFT
  FOR_ACKNOWLEDGEMENT
  FOR_APPROVAL
  UPCOMING
  DONE
  RESCHEDULED
  CANCELLED
}

model EventCommittee {
  id                    Int                     @id @default(autoincrement())
  userId                String?
  eventId               String
  email                 String
  name                  String?
  approvalStatus        ApprovalStatus          @default(WAITING)
  activeStatus          ActiveStatus            @default(ACTIVE)
  EventCommitteeInquiry EventCommitteeInquiry[] @relation("CommitteeInquiries")
  user                  User?                   @relation("UserAsCommittee", fields: [userId], references: [id])
  event                 Event                   @relation("EventCommittees", fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, eventId])
}

enum ApprovalStatus {
  WAITING
  REQUESTING_REVISION
  REJECTED
  APPROVED
}

enum ActiveStatus {
  INACTIVE
  ACTIVE
}

model EventSentEmailCommittee {
  id             Int     @id @unique @default(autoincrement())
  isSent         Boolean
  committeeEmail String
  messageId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventCommitteeInquiry {
  id               Int               @id @default(autoincrement())
  committeeEmail   String
  committeeEventId String
  content          String?
  responseType     ResponseType
  logs             EventHistoryLog[] @relation("InquiryLogs")
  committee        EventCommittee    @relation("CommitteeInquiries", fields: [committeeEmail, committeeEventId], references: [email, eventId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ResponseType {
  REQUESTING_REVISION
  REJECTED
  APPROVED
}

model EventParticipant {
  id      Int     @id @default(autoincrement())
  userId  String?
  eventId String
  email   String
  name    String?
  user    User?   @relation("UserAsParticipant", fields: [userId], references: [id])
  event   Event   @relation("EventParticipants", fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, eventId])
}

model EventFinance {
  id                     Int             @id @default(autoincrement())
  financeCategory        FinanceCategory
  transactionType        String
  transactionDescription String
  serviceProvider        String
  estimatedAmount        Decimal
  actualAmount           Decimal?
  eventId                String
  event                  Event           @relation("EventFinances", fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([transactionDescription, eventId])
}

enum FinanceCategory {
  REVENUE
  EXPENSE
}

model EventFeedback {
  id      Int      @id @default(autoincrement())
  content String
  rating  Decimal?
  userId  String
  eventId String
  user    User     @relation("UserFeedback", fields: [userId], references: [id])
  event   Event    @relation("EventFeedbacks", fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, eventId])
}

model EventHistoryLog {
  id                 Int                    @id @default(autoincrement())
  eventId            String
  email              String?
  message            String
  oldValues          String?
  newValues          String?
  committeeInquiryId Int?
  action             HistoryAction
  event              Event                  @relation("EventHistoryLogs", fields: [eventId], references: [id])
  committeeInquiry   EventCommitteeInquiry? @relation("InquiryLogs", fields: [committeeInquiryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum HistoryAction {
  CREATED
  UPDATED
  SUBMITTED
  INQUIRED
  REJECTED
  APPROVED
  DELETED
  PUBLISHED
}

model Group {
  id             String            @id @default(uuid())
  name           String            @unique
  description    String
  rules          String[]
  membersCount   Int               @default(0)
  eventsCount    Int               @default(0)
  visibility     GroupVisibility?  @default(PUBLIC)
  postPermission PostPermission?   @default(ALL_MEMBERS)
  joinPermission JoinPermission?   @default(ANYONE_CAN_JOIN)
  event          EventGroup[]      @relation("GroupEvents")
  members        GroupMembership[] @relation("GroupMembers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMembership {
  id      String    @id @default(uuid())
  userId  String
  email   String
  name    String
  groupId String
  role    UserRoles @default(MEMBER)
  user    User      @relation("UserGroups", fields: [userId], references: [id])
  group   Group     @relation("GroupMembers", fields: [groupId], references: [id])

  joinedAt DateTime @default(now())

  @@unique([userId, groupId])
}

enum UserRoles {
  ADMIN
  MODERATOR
  MEMBER
}

enum JoinPermission {
  ANYONE_CAN_JOIN
  APPROVAL_REQUIRED
  INVITE_ONLY
}

enum PostPermission {
  ALL_MEMBERS
  MODERATORS_ONLY
}

enum GroupVisibility {
  PUBLIC
  PRIVATE
}
